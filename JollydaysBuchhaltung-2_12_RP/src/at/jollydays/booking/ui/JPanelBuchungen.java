/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelBuchungen.java
 *
 * Created on 25.10.2010, 15:37:04
 */

package at.jollydays.booking.ui;

import at.jollydays.booking.Globals; 
import at.jollydays.booking.bo.Invoice;
import at.jollydays.booking.bo.OrganiserInvoice;
import at.jollydays.booking.bo.Partner;
import at.jollydays.booking.control.BookingController;
import at.jollydays.booking.control.CSVController;
import at.jollydays.booking.control.ConfigurationController;
import at.jollydays.booking.control.LoggingHandler;
import at.jollydays.booking.control.NotFoundException;
import at.jollydays.booking.control.NothingFoundException;
import at.jollydays.booking.control.PaymentStatistic;
import at.jollydays.booking.db.InvoiceJpaController;
import at.jollydays.booking.db.OrganiserInvoiceJpaController;
import com.csvreader.CsvReader;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;

/**
 *
 * @author Gunter Reinitzer
 */
public class JPanelBuchungen extends javax.swing.JPanel {

    BookingController bookingController;
    ConfigurationController configurationController;

    /** Creates new form JPanelBuchungen */
    public JPanelBuchungen() {
        initComponents();
        
        if (java.beans.Beans.isDesignTime()) return;

        configurationController = ((MainUI)Application.getInstance()).getConfigurationController();
        bookingController = new BookingController(configurationController);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonARSynch = new javax.swing.JButton();
        jButtonERSynch = new javax.swing.JButton();
        jButtonDebSynch = new javax.swing.JButton();
        jButtonKredSynch = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButtonKundenRechnungen = new javax.swing.JButton();
        jTextARFrom = new javax.swing.JTextField();
        jTextARNumber = new javax.swing.JTextField();
        jLabelArNumber = new javax.swing.JLabel();
        jLabelARFrom = new javax.swing.JLabel();
        jTextDebNumber = new javax.swing.JTextField();
        jLabelDebNumber = new javax.swing.JLabel();
        jTextERNumber = new javax.swing.JTextField();
        jLabelERNumber = new javax.swing.JLabel();
        jTextERFrom = new javax.swing.JTextField();
        jLabelERFrom = new javax.swing.JLabel();
        jTextKredNumber = new javax.swing.JTextField();
        jLabelKredNumber = new javax.swing.JLabel();
        jTextAROneNumber = new javax.swing.JTextField();
        jLabelAROneNumber = new javax.swing.JLabel();
        jTextEROneNumber = new javax.swing.JTextField();
        jLabelEROneNumber = new javax.swing.JLabel();
        jTextFileChooserKundenRechnungen = new javax.swing.JTextField();
        jButtonFileChooserKundenRechnungen = new javax.swing.JButton();
        jLabelARTo = new javax.swing.JLabel();
        jTextARTo = new javax.swing.JTextField();
        jLabelERTo = new javax.swing.JLabel();
        jTextERTo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFileChooserARRechnungen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFileChooserERRechnungen = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButtonVeranstalterRechnungen = new javax.swing.JButton();
        jTextFileChooserVeranstalterRechnungen = new javax.swing.JTextField();
        jButtonFileChooserVeranstalterRechnungen = new javax.swing.JButton();
        jButtonDimensionen = new javax.swing.JButton();
        jButtonTest = new javax.swing.JButton();
        jButtonKostentraeger = new javax.swing.JButton();
        jTextKostentraeger = new javax.swing.JTextField();
        jTextFileChooserDebitoren = new javax.swing.JTextField();
        jButtonSelectFileDebitoren = new javax.swing.JButton();
        jTextFileChooserKreditoren = new javax.swing.JTextField();
        jButtonSelectFileKreditoren = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setName("Form"); // NOI18N
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(at.jollydays.booking.ui.MainUI.class).getContext().getActionMap(JPanelBuchungen.class, this);
        jButtonARSynch.setAction(actionMap.get("ausgangsrechnungen")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(at.jollydays.booking.ui.MainUI.class).getContext().getResourceMap(JPanelBuchungen.class);
        jButtonARSynch.setText(resourceMap.getString("jButtonARSynch.text")); // NOI18N
        jButtonARSynch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonARSynch.setName("jButtonARSynch"); // NOI18N
        add(jButtonARSynch, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 200, -1));

        jButtonERSynch.setAction(actionMap.get("eingangsrechnungen")); // NOI18N
        jButtonERSynch.setText(resourceMap.getString("jButtonERSynch.text")); // NOI18N
        jButtonERSynch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonERSynch.setName("jButtonERSynch"); // NOI18N
        add(jButtonERSynch, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 190, 200, -1));

        jButtonDebSynch.setAction(actionMap.get("debitoren")); // NOI18N
        jButtonDebSynch.setText(resourceMap.getString("jButtonDebSynch.text")); // NOI18N
        jButtonDebSynch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonDebSynch.setName("jButtonDebSynch"); // NOI18N
        add(jButtonDebSynch, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 270, 200, -1));

        jButtonKredSynch.setAction(actionMap.get("kreditoren")); // NOI18N
        jButtonKredSynch.setText(resourceMap.getString("jButtonKredSynch.text")); // NOI18N
        jButtonKredSynch.setToolTipText(resourceMap.getString("jButtonKredSynch.toolTipText")); // NOI18N
        jButtonKredSynch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonKredSynch.setName("jButtonKredSynch"); // NOI18N
        add(jButtonKredSynch, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 370, 200, -1));

        jButton3.setAction(actionMap.get("kundenZahlungen")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButton3.setName("jButton3"); // NOI18N
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 727, 0, -1));

        jButtonKundenRechnungen.setAction(actionMap.get("kundenZahlungen")); // NOI18N
        jButtonKundenRechnungen.setText(resourceMap.getString("jButtonKundenRechnungen.text")); // NOI18N
        jButtonKundenRechnungen.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonKundenRechnungen.setName("jButtonKundenRechnungen"); // NOI18N
        add(jButtonKundenRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 430, 200, -1));

        jTextARFrom.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextARFrom.setText(resourceMap.getString("jTextARFrom.text")); // NOI18N
        jTextARFrom.setName("jTextARFrom"); // NOI18N
        add(jTextARFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 80, -1));

        jTextARNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextARNumber.setText(resourceMap.getString("jTextARNumber.text")); // NOI18N
        jTextARNumber.setName("jTextARNumber"); // NOI18N
        add(jTextARNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 95, -1));

        jLabelArNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelArNumber.setText(resourceMap.getString("jLabelArNumber.text")); // NOI18N
        jLabelArNumber.setName("jLabelArNumber"); // NOI18N
        add(jLabelArNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 55, 20));

        jLabelARFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelARFrom.setText(resourceMap.getString("jLabelARFrom.text")); // NOI18N
        jLabelARFrom.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabelARFrom.setName("jLabelARFrom"); // NOI18N
        add(jLabelARFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, -1, 20));

        jTextDebNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextDebNumber.setText(resourceMap.getString("jTextDebNumber.text")); // NOI18N
        jTextDebNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextDebNumber.setName("jTextDebNumber"); // NOI18N
        add(jTextDebNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, 80, -1));

        jLabelDebNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDebNumber.setText(resourceMap.getString("jLabelDebNumber.text")); // NOI18N
        jLabelDebNumber.setName("jLabelDebNumber"); // NOI18N
        add(jLabelDebNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 70, -1));

        jTextERNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextERNumber.setText(resourceMap.getString("jTextERNumber.text")); // NOI18N
        jTextERNumber.setName("jTextERNumber"); // NOI18N
        add(jTextERNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 160, 90, -1));

        jLabelERNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelERNumber.setText(resourceMap.getString("jLabelERNumber.text")); // NOI18N
        jLabelERNumber.setName("jLabelERNumber"); // NOI18N
        add(jLabelERNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 160, 54, 20));

        jTextERFrom.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextERFrom.setText(resourceMap.getString("jTextERFrom.text")); // NOI18N
        jTextERFrom.setName("jTextERFrom"); // NOI18N
        add(jTextERFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 80, -1));

        jLabelERFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelERFrom.setText(resourceMap.getString("jLabelERFrom.text")); // NOI18N
        jLabelERFrom.setName("jLabelERFrom"); // NOI18N
        add(jLabelERFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 70, -1));

        jTextKredNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextKredNumber.setText(resourceMap.getString("jTextKredNumber.text")); // NOI18N
        jTextKredNumber.setName("jTextKredNumber"); // NOI18N
        add(jTextKredNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 340, 80, -1));

        jLabelKredNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelKredNumber.setText(resourceMap.getString("jLabelKredNumber.text")); // NOI18N
        jLabelKredNumber.setName("jLabelKredNumber"); // NOI18N
        add(jLabelKredNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 340, 70, -1));

        jTextAROneNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextAROneNumber.setText(resourceMap.getString("jTextAROneNumber.text")); // NOI18N
        jTextAROneNumber.setName("jTextAROneNumber"); // NOI18N
        add(jTextAROneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 80, -1));

        jLabelAROneNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAROneNumber.setText(resourceMap.getString("jLabelAROneNumber.text")); // NOI18N
        jLabelAROneNumber.setName("jLabelAROneNumber"); // NOI18N
        add(jLabelAROneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 70, 20));

        jTextEROneNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextEROneNumber.setText(resourceMap.getString("jTextEROneNumber.text")); // NOI18N
        jTextEROneNumber.setName("jTextEROneNumber"); // NOI18N
        add(jTextEROneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 80, -1));

        jLabelEROneNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEROneNumber.setText(resourceMap.getString("jLabelEROneNumber.text")); // NOI18N
        jLabelEROneNumber.setName("jLabelEROneNumber"); // NOI18N
        add(jLabelEROneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, 70, -1));

        jTextFileChooserKundenRechnungen.setText(resourceMap.getString("jTextFileChooserKundenRechnungen.text")); // NOI18N
        jTextFileChooserKundenRechnungen.setName("jTextFileChooserKundenRechnungen"); // NOI18N
        add(jTextFileChooserKundenRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 277, 27));

        jButtonFileChooserKundenRechnungen.setAction(actionMap.get("selectFileKundenRechnungen")); // NOI18N
        jButtonFileChooserKundenRechnungen.setText(resourceMap.getString("jButtonFileChooserKundenRechnungen.text")); // NOI18N
        jButtonFileChooserKundenRechnungen.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jButtonFileChooserKundenRechnungen.setName("jButtonFileChooserKundenRechnungen"); // NOI18N
        add(jButtonFileChooserKundenRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 430, 70, -1));

        jLabelARTo.setText(resourceMap.getString("jLabelARTo.text")); // NOI18N
        jLabelARTo.setName("jLabelARTo"); // NOI18N
        add(jLabelARTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 30, 20));

        jTextARTo.setText(resourceMap.getString("jTextARTo.text")); // NOI18N
        jTextARTo.setName("jTextARTo"); // NOI18N
        add(jTextARTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 80, -1));

        jLabelERTo.setText(resourceMap.getString("jLabelERTo.text")); // NOI18N
        jLabelERTo.setName("jLabelERTo"); // NOI18N
        add(jLabelERTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, -1, 20));

        jTextERTo.setText(resourceMap.getString("jTextERTo.text")); // NOI18N
        jTextERTo.setName("jTextERTo"); // NOI18N
        add(jTextERTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 80, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 80, -1));

        jTextFileChooserARRechnungen.setText(resourceMap.getString("jTextFileChooserARRechnungen.text")); // NOI18N
        jTextFileChooserARRechnungen.setName("jTextFileChooserARRechnungen"); // NOI18N
        add(jTextFileChooserARRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 290, -1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, -1, -1));

        jTextFileChooserERRechnungen.setText(resourceMap.getString("jTextFileChooserERRechnungen.text")); // NOI18N
        jTextFileChooserERRechnungen.setName("jTextFileChooserERRechnungen"); // NOI18N
        add(jTextFileChooserERRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 190, 280, -1));

        jButton6.setAction(actionMap.get("selectFileARRechnungen")); // NOI18N
        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N
        add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, 72, -1));

        jButton7.setAction(actionMap.get("selectFileERRechnungen")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N
        add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 190, 70, -1));

        jButtonVeranstalterRechnungen.setText(resourceMap.getString("jButtonVeranstalterRechnungen.text")); // NOI18N
        jButtonVeranstalterRechnungen.setName("jButtonVeranstalterRechnungen"); // NOI18N
        add(jButtonVeranstalterRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 470, 200, -1));

        jTextFileChooserVeranstalterRechnungen.setText(resourceMap.getString("jTextFileChooserVeranstalterRechnungen.text")); // NOI18N
        jTextFileChooserVeranstalterRechnungen.setName("jTextFileChooserVeranstalterRechnungen"); // NOI18N
        add(jTextFileChooserVeranstalterRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, 277, -1));

        jButtonFileChooserVeranstalterRechnungen.setAction(actionMap.get("selectFileVeranstalterRechnungen")); // NOI18N
        jButtonFileChooserVeranstalterRechnungen.setText(resourceMap.getString("jButtonFileChooserVeranstalterRechnungen.text")); // NOI18N
        jButtonFileChooserVeranstalterRechnungen.setName("jButtonFileChooserVeranstalterRechnungen"); // NOI18N
        add(jButtonFileChooserVeranstalterRechnungen, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 470, 70, -1));

        jButtonDimensionen.setAction(actionMap.get("dimensionen")); // NOI18N
        jButtonDimensionen.setText(resourceMap.getString("jButtonDimensionen.text")); // NOI18N
        jButtonDimensionen.setName("jButtonDimensionen"); // NOI18N
        add(jButtonDimensionen, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 530, 200, -1));

        jButtonTest.setAction(actionMap.get("testBuchungslogik")); // NOI18N
        jButtonTest.setText(resourceMap.getString("jButtonTest.text")); // NOI18N
        jButtonTest.setName("jButtonTest"); // NOI18N
        add(jButtonTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 180, -1));

        jButtonKostentraeger.setAction(actionMap.get("kostentraeger")); // NOI18N
        jButtonKostentraeger.setText(resourceMap.getString("jButtonKostentraeger.text")); // NOI18N
        jButtonKostentraeger.setName("jButtonKostentraeger"); // NOI18N
        add(jButtonKostentraeger, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 570, 200, -1));

        jTextKostentraeger.setText(resourceMap.getString("jTextKostentraeger.text")); // NOI18N
        jTextKostentraeger.setName("jTextKostentraeger"); // NOI18N
        add(jTextKostentraeger, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 570, 80, -1));

        jTextFileChooserDebitoren.setText(resourceMap.getString("jTextFileChooserDebitoren.text")); // NOI18N
        jTextFileChooserDebitoren.setName("jTextFileChooserDebitoren"); // NOI18N
        add(jTextFileChooserDebitoren, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 279, -1));

        jButtonSelectFileDebitoren.setAction(actionMap.get("selectFileDebitoren")); // NOI18N
        jButtonSelectFileDebitoren.setText(resourceMap.getString("jButtonSelectFileDebitoren.text")); // NOI18N
        jButtonSelectFileDebitoren.setName("jButtonSelectFileDebitoren"); // NOI18N
        add(jButtonSelectFileDebitoren, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 70, -1));

        jTextFileChooserKreditoren.setText(resourceMap.getString("jTextFileChooserKreditoren.text")); // NOI18N
        jTextFileChooserKreditoren.setName("jTextFileChooserKreditoren"); // NOI18N
        add(jTextFileChooserKreditoren, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, 280, -1));

        jButtonSelectFileKreditoren.setAction(actionMap.get("selectFileKreditoren")); // NOI18N
        jButtonSelectFileKreditoren.setText(resourceMap.getString("jButtonSelectFileKreditoren.text")); // NOI18N
        jButtonSelectFileKreditoren.setName("jButtonSelectFileKreditoren"); // NOI18N
        add(jButtonSelectFileKreditoren, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 370, 70, -1));

        jSeparator1.setName("jSeparator1"); // NOI18N
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 870, 10));

        jSeparator2.setName("jSeparator2"); // NOI18N
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 880, 10));

        jSeparator3.setName("jSeparator3"); // NOI18N
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 890, 10));

        jSeparator4.setName("jSeparator4"); // NOI18N
        add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 890, 10));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setMaximumSize(new java.awt.Dimension(140, 16));
        jLabel3.setMinimumSize(new java.awt.Dimension(140, 16));
        jLabel3.setName("jLabel3"); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 20));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 160, -1));

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 150, -1));

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 280, -1, 20));

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, -1, -1));

        jSeparator5.setName("jSeparator5"); // NOI18N
        add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 900, 10));

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 110, -1));

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 570, 60, 20));

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 370, -1, -1));

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 430, -1, -1));

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void ausgangsrechnungen() {
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        InvoiceJpaController invoiceJpaController = new InvoiceJpaController();
        CSVController cSVController = new CSVController();
        cSVController.prepareWriters();
        LoggingHandler lh = null;
        File homeFile = getHomeFile();

        try {
            int from = 0;
            int to = 0;
            int number = 0;
            int invoiceNumber = 0;
            File fileList = null;


            try {
                from = Integer.parseInt(this.jTextARFrom.getText().trim());
            } catch (Exception ex) { }
            try {
                to = Integer.parseInt(this.jTextARTo.getText().trim());
            } catch (Exception ex) { }
            try {
                number = Integer.parseInt(this.jTextARNumber.getText().trim());
            } catch (Exception ex) { }
            try {
                invoiceNumber = Integer.parseInt(this.jTextAROneNumber.getText().trim());
            } catch (Exception ex) { }
            try {
                if (jTextFileChooserARRechnungen.getText().trim().length() > 0) {
                    fileList = new File(jTextFileChooserARRechnungen.getText().trim());
                    if (!fileList.exists() || !fileList.canRead()) {
                        fileList = null;
                    }
                }
            } catch (Exception ex) { }

            if (fileList != null) {
                // file upload mit liste der Rechnungsnummern
                CsvReader reader = new CsvReader(fileList.getCanonicalPath());
                lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvARFile(new File(homeFile, "AR0.csv"));
                cSVController.setCsvDBFile(new File(homeFile, "DB0.csv"));

                while (true) {
                    if (!reader.readRecord()) {
                        break;
                    }
                    String value = reader.get(0);
                    try {
                        int invoiceNr = Integer.parseInt(value);
                        List<Invoice> invoices = invoiceJpaController.findInvoiceByNumber(invoiceNr);
                        if (invoices.size() > 0) {
                            Invoice invoice = invoices.iterator().next();
                            bookingController.processARPacket(invoice.getId(), 0, 1, lh, cSVController, false);
                        }
                    } catch (Throwable th) {
                    }
                }
                reader.close();

            } else if (invoiceNumber > 0) {
                // einzelne rechnung
                List<Invoice> invoices = invoiceJpaController.findInvoiceByNumber(invoiceNumber);
                if (invoices.size() > 0) {
                    Invoice invoice = invoices.iterator().next();
                    lh = new LoggingHandler(new File(homeFile + "log"), invoice.getInvoiceNumber());
                    cSVController.setCsvARFile(new File(homeFile, "AR" + invoiceNumber + ".csv"));
                    cSVController.setCsvDBFile(new File(homeFile, "DB" + invoiceNumber + ".csv"));

                    bookingController.processARPacket(invoice.getId(), 0, 1, lh, cSVController,false);
                 }

            } else {
                // rechnungen von/bis oder von/anzahl
                lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvARFile(new File(homeFile, "AR0.csv"));
                cSVController.setCsvDBFile(new File(homeFile, "DB0.csv"));
                bookingController.processARPacket(from, to, number, lh, cSVController, false);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } catch (NotFoundException ex) {
            System.out.println("keine Belege gefunden");
        } finally {
            if (lh !=  null)
                lh.close();
            cSVController.closeWriters();
        }
        this.setCursor(Cursor.getDefaultCursor());
    }

    
    @Action
    public void debitoren() {
        
        if (java.beans.Beans.isDesignTime()) return;

        int partnerFrom = 0;
        File fileList = null;
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        File homeFile = getHomeFile();

        CSVController cSVController = new CSVController();
        cSVController.prepareWriters();

        try {
            partnerFrom = Integer.parseInt(jTextDebNumber.getText());
        } catch (Throwable t) {
        }
        try {
            if (jTextFileChooserDebitoren.getText().trim().length() > 0) {
                fileList = new File(jTextFileChooserDebitoren.getText().trim());
                if (!fileList.exists() || !fileList.canRead()) {
                    fileList = null;
                }
            }
        } catch (Exception ex) {
        }

        try {

            if (fileList != null) {
                // file upload mit liste der Rechnungsnummern
                CsvReader reader = new CsvReader(fileList.getCanonicalPath());
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvDBFile(new File(homeFile, "DB0.csv"));

                while (true) {
                    if (!reader.readRecord()) {
                        break;
                    }
                    String value = reader.get(0);
                    try {
                        int kunde = Integer.parseInt(value);
                        if (kunde > 0) {
                            if (kunde > Globals.DEBITORSTARTVALUE)
                                kunde -= Globals.DEBITORSTARTVALUE;
                            Partner partner = bookingController.getConfigurationController().getPartnerJpaController().findPartner(kunde);
                            if (partner != null) {
                                bookingController.processSingleDebitor(partner, lh, cSVController);
                            } else {
                                lh.getLogger(Globals.LOGGINGDB).log(Level.SEVERE, "Partner nicht gefunden: " + value);
                            }
                        } else {
                            lh.getLogger(Globals.LOGGINGDB).log(Level.SEVERE, "Partner nicht gefunden: " + value);
                        }
                    } catch (Throwable th) {
                    }
                }
                cSVController.closeWriters();
                lh.close();
                reader.close();

            } else if (partnerFrom > 0) {
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Integer.toString(partnerFrom));
                cSVController.setCsvDBFile(new File(homeFile, "DB" + partnerFrom + ".csv"));
                bookingController.processDebitor(partnerFrom, 0, 1, false, lh, cSVController);
                lh.close();
//            } else { 
//                LoggingHandler lh = new LoggingHandler(new File("../log"), Globals.EMPTYSTRING);
//                cSVController.setCsvDBFile(new File(homeFile, "DBall.csv"));
//                bookingController.processDebitor(partnerFrom, 0, 99999, true, lh, cSVController); 
//                lh.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        }

        cSVController.closeWriters();

        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void eingangsrechnungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        OrganiserInvoiceJpaController invoiceJpaController = new OrganiserInvoiceJpaController();
        CSVController cSVController = new CSVController();
        cSVController.prepareWriters();
        File homeFile = getHomeFile();

        try {
            int from = 0;
            int to = 0;
            int number = 0;
            int invoiceNumber = 0;
            File fileList = null;

            try {
                from = Integer.parseInt(this.jTextERFrom.getText().trim());
            } catch (Exception ex) { }
            try {
                to = Integer.parseInt(this.jTextERTo.getText().trim());
            } catch (Exception ex) { }
            try {
                number = Integer.parseInt(this.jTextERNumber.getText().trim());
            } catch (Exception ex) { }
            try {
                invoiceNumber = Integer.parseInt(this.jTextEROneNumber.getText().trim());
            } catch (Exception ex) { }
            try {
                if (jTextFileChooserERRechnungen.getText().trim().length() > 0) {
                    fileList = new File(jTextFileChooserERRechnungen.getText().trim());
                    if (!fileList.exists() || !fileList.canRead()) {
                        fileList = null;
                    }
                }
            } catch (Exception ex) { }

            if (fileList != null) {
                // file upload mit liste der Rechnungsnummern
                CsvReader reader = new CsvReader(fileList.getCanonicalPath());
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvERFile(new File(homeFile, "ER0.csv"));
                cSVController.setCsvCRFile(new File(homeFile, "CR0.csv"));
                cSVController.setCsvKTFile(new File(homeFile, "KT0.csv"));

                while (true) {
                    if (!reader.readRecord()) {
                        break;
                    }
                    String value = reader.get(0);
                    try {
                        int invoiceNr = Integer.parseInt(value);
                        List<OrganiserInvoice> invoices = invoiceJpaController.findOrganiserInvoiceByNumber(invoiceNr);
                        if (invoices.size() > 0) {
                            OrganiserInvoice invoice = invoices.iterator().next();
                            bookingController.processERPacket(invoice.getId(), 0, 1, lh, cSVController, false);
                        }
                    } catch (Throwable th) {
                    }
                }
                lh.close();

            } else if (invoiceNumber > 0) {
                List<OrganiserInvoice> invoices = invoiceJpaController.findOrganiserInvoiceByNumber(invoiceNumber);
                if (invoices.size() > 0) {
                    OrganiserInvoice invoice = invoices.iterator().next();
                    LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), invoice.getInvoiceNumber());
                    cSVController.setCsvERFile(new File(homeFile, "ER" + invoiceNumber + ".csv"));
                    cSVController.setCsvCRFile(new File(homeFile, "CR" + invoiceNumber + ".csv"));
                    cSVController.setCsvKTFile(new File(homeFile, "KT" + invoiceNumber + ".csv"));

                    bookingController.processERPacket(invoice.getId(), 0, 1, lh, cSVController, false);
                    lh.close();
                }

            } else if (from > 0 && number > 0) {
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvERFile(new File(homeFile, "ER0.csv"));
                cSVController.setCsvCRFile(new File(homeFile, "CR0.csv"));
                cSVController.setCsvKTFile(new File(homeFile, "KT0.csv"));

                bookingController.processERPacket(from, to, number, lh, cSVController, false);
                lh.close();
            }
        } catch (NothingFoundException ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        }
        cSVController.closeWriters();
        
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void kreditoren() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        int partnerFrom = 0;
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        File homeFile = getHomeFile();

        CSVController cSVController = new CSVController();
        cSVController.prepareWriters();

        try {
            partnerFrom = Integer.parseInt(jTextKredNumber.getText());
        } catch (Throwable t) {
        }
        try {
            if ( partnerFrom > 0) {
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Integer.toString(partnerFrom));
                cSVController.setCsvCRFile(new File(homeFile, "CR" + partnerFrom + ".csv"));
                bookingController.processKreditor(partnerFrom, 1, false, lh, cSVController);
                lh.close();
            } else {
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
                cSVController.setCsvCRFile(new File(homeFile, "CRALL.csv"));
                bookingController.processKreditor(partnerFrom, 999999, false, lh, cSVController);
                lh.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        }

        cSVController.closeWriters();
        
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void selectFileKundenRechnungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserKundenRechnungen.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserKundenRechnungen.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }
    
    @Action
    public void selectFileVeranstalterRechnungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserVeranstalterRechnungen.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserVeranstalterRechnungen.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }
    

    @Action
    public void selectFileARRechnungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserARRechnungen.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserARRechnungen.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }

    @Action
    public void selectFileERRechnungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserERRechnungen.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserERRechnungen.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }

    @Action
    public void kundenZahlungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        File file = new File(jTextFileChooserKundenRechnungen.getText());
        File homeFile = getHomeFile();

        if (file.exists() && file.canRead()) {
            try {
                String date = (new SimpleDateFormat("yyMMdd")).format(new Date());
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), date);
                PaymentStatistic statistic = bookingController.processKZ(file, lh);
                lh.getLogger(Globals.LOGGINGKZ).log(Level.INFO, "Anzahl VoucherOkCounter      : " + statistic.getVoucherOkCounter());
                lh.getLogger(Globals.LOGGINGKZ).log(Level.INFO, "Anzahl StatusNokCounter      : " + statistic.getStatusNokCounter());
                lh.getLogger(Globals.LOGGINGKZ).log(Level.INFO, "Anzahl InvoiceNotFoundCounter: " + statistic.getInvoiceNotFoundCounter());
                lh.getLogger(Globals.LOGGINGKZ).log(Level.INFO, "Anzahl ErrorCounter          : " + statistic.getErrorCounter());

                lh.close();
            } catch (IOException ex) {
                Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void veranstalterZahlungen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        File file = new File(jTextFileChooserVeranstalterRechnungen.getText());
        File homeFile = getHomeFile();

        if (file.exists() && file.canRead()) {
            try {
                String date = (new SimpleDateFormat("yyMMdd")).format(new Date());
                LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), date);
                PaymentStatistic statistic = bookingController.processVZ(file, lh);
                lh.getLogger(Globals.LOGGINGVZ).log(Level.INFO, "Anzahl VoucherOkCounter      : " + statistic.getVoucherOkCounter());
                lh.getLogger(Globals.LOGGINGVZ).log(Level.INFO, "Anzahl StatusNokCounter      : " + statistic.getStatusNokCounter());
                lh.getLogger(Globals.LOGGINGVZ).log(Level.INFO, "Anzahl InvoiceNotFoundCounter: " + statistic.getInvoiceNotFoundCounter());
                lh.getLogger(Globals.LOGGINGVZ).log(Level.INFO, "Anzahl ErrorCounter          : " + statistic.getErrorCounter());

                lh.close();
            } catch (IOException ex) {
                Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void dimensionen() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        File homeFile = getHomeFile();

        CSVController cSVController = new CSVController();
        cSVController.prepareWriters();
        try {
            cSVController.setCsvDIFile(new File(homeFile, "DI.csv"));
            bookingController.processDI(cSVController);
        } catch (NotFoundException ex) {
        } catch (IOException ex) {
            Logger.getLogger(JPanelBuchungen.class.getName()).log(Level.SEVERE, null, ex);
        }

        cSVController.closeWriters();
        this.setCursor(Cursor.getDefaultCursor());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonARSynch;
    private javax.swing.JButton jButtonDebSynch;
    private javax.swing.JButton jButtonDimensionen;
    private javax.swing.JButton jButtonERSynch;
    private javax.swing.JButton jButtonFileChooserKundenRechnungen;
    private javax.swing.JButton jButtonFileChooserVeranstalterRechnungen;
    private javax.swing.JButton jButtonKostentraeger;
    private javax.swing.JButton jButtonKredSynch;
    private javax.swing.JButton jButtonKundenRechnungen;
    private javax.swing.JButton jButtonSelectFileDebitoren;
    private javax.swing.JButton jButtonSelectFileKreditoren;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonVeranstalterRechnungen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelARFrom;
    private javax.swing.JLabel jLabelAROneNumber;
    private javax.swing.JLabel jLabelARTo;
    private javax.swing.JLabel jLabelArNumber;
    private javax.swing.JLabel jLabelDebNumber;
    private javax.swing.JLabel jLabelERFrom;
    private javax.swing.JLabel jLabelERNumber;
    private javax.swing.JLabel jLabelEROneNumber;
    private javax.swing.JLabel jLabelERTo;
    private javax.swing.JLabel jLabelKredNumber;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField jTextARFrom;
    private javax.swing.JTextField jTextARNumber;
    private javax.swing.JTextField jTextAROneNumber;
    private javax.swing.JTextField jTextARTo;
    private javax.swing.JTextField jTextDebNumber;
    private javax.swing.JTextField jTextERFrom;
    private javax.swing.JTextField jTextERNumber;
    private javax.swing.JTextField jTextEROneNumber;
    private javax.swing.JTextField jTextERTo;
    private javax.swing.JTextField jTextFileChooserARRechnungen;
    private javax.swing.JTextField jTextFileChooserDebitoren;
    private javax.swing.JTextField jTextFileChooserERRechnungen;
    private javax.swing.JTextField jTextFileChooserKreditoren;
    private javax.swing.JTextField jTextFileChooserKundenRechnungen;
    private javax.swing.JTextField jTextFileChooserVeranstalterRechnungen;
    private javax.swing.JTextField jTextKostentraeger;
    private javax.swing.JTextField jTextKredNumber;
    // End of variables declaration//GEN-END:variables

    private File getHomeFile() {
        
        if (java.beans.Beans.isDesignTime()) return null;
        
        String homedir = System.getProperty("user.home") + File.separator + "buhatest" + File.separator;
        File homeFile = new File(homedir);
        homeFile.mkdirs();
        File homeFileLog = new File(homedir + "log");
        homeFileLog.mkdirs();
        return homeFile;
    }

    @Action
    public void testBuchungslogik() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String text = jTextAROneNumber.getText();
        if (text.trim().length() > 0) {
            try {
                int number = Integer.parseInt(text.trim()); 
                String result = bookingController.testBuchungslogikAR(number);
                JOptionPane.showMessageDialog(this, result);
            } catch (Exception ex) { 
                ex.printStackTrace();
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void kostentraeger() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String text = jTextKostentraeger.getText();
        if (text.trim().length() > 0) {
            CSVController cSVController = new CSVController();
            File homeFile = getHomeFile();
            LoggingHandler lh = new LoggingHandler(new File(homeFile + "log"), Globals.EMPTYSTRING);
            try {
                int number = Integer.parseInt(text.trim());
                InvoiceJpaController invoiceJpaController = new InvoiceJpaController();
                cSVController.prepareWriters();
                cSVController.setCsvKTFile(new File(homeFile, "KT_"+ number +".csv"));
                bookingController.processKT(number, lh, cSVController);
            } catch (Exception ex) {  
                ex.printStackTrace();
            } finally {
                lh.close();
                cSVController.closeWriters();
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }

    @Action
    public void selectFileDebitoren() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserDebitoren.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserDebitoren.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }

    @Action
    public void selectFileKreditoren() {
        
        if (java.beans.Beans.isDesignTime()) return;
        
        final JFileChooser fc = new JFileChooser(jTextFileChooserKreditoren.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.showOpenDialog(this);
        try {
            // Open an input stream
            //Scanner reader = new Scanner(fc.getSelectedFile());
            jTextFileChooserKreditoren.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception ex) {
        }
    }

}
